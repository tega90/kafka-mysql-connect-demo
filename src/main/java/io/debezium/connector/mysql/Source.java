/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.debezium.connector.mysql;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Source extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1665747615101450061L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Source\",\"namespace\":\"io.debezium.connector.mysql\",\"fields\":[{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"server_id\",\"type\":\"long\"},{\"name\":\"ts_sec\",\"type\":\"long\"},{\"name\":\"gtid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"file\",\"type\":\"string\"},{\"name\":\"pos\",\"type\":\"long\"},{\"name\":\"row\",\"type\":\"int\"},{\"name\":\"snapshot\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"thread\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"db\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"table\",\"type\":[\"null\",\"string\"],\"default\":null}],\"connect.name\":\"io.debezium.connector.mysql.Source\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Source> ENCODER =
      new BinaryMessageEncoder<Source>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Source> DECODER =
      new BinaryMessageDecoder<Source>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Source> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Source> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Source>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Source to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Source from a ByteBuffer. */
  public static Source fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence version;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public long server_id;
  @Deprecated public long ts_sec;
  @Deprecated public java.lang.CharSequence gtid;
  @Deprecated public java.lang.CharSequence file;
  @Deprecated public long pos;
  @Deprecated public int row;
  @Deprecated public java.lang.Boolean snapshot;
  @Deprecated public java.lang.Long thread;
  @Deprecated public java.lang.CharSequence db;
  @Deprecated public java.lang.CharSequence table;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Source() {}

  /**
   * All-args constructor.
   * @param version The new value for version
   * @param name The new value for name
   * @param server_id The new value for server_id
   * @param ts_sec The new value for ts_sec
   * @param gtid The new value for gtid
   * @param file The new value for file
   * @param pos The new value for pos
   * @param row The new value for row
   * @param snapshot The new value for snapshot
   * @param thread The new value for thread
   * @param db The new value for db
   * @param table The new value for table
   */
  public Source(java.lang.CharSequence version, java.lang.CharSequence name, java.lang.Long server_id, java.lang.Long ts_sec, java.lang.CharSequence gtid, java.lang.CharSequence file, java.lang.Long pos, java.lang.Integer row, java.lang.Boolean snapshot, java.lang.Long thread, java.lang.CharSequence db, java.lang.CharSequence table) {
    this.version = version;
    this.name = name;
    this.server_id = server_id;
    this.ts_sec = ts_sec;
    this.gtid = gtid;
    this.file = file;
    this.pos = pos;
    this.row = row;
    this.snapshot = snapshot;
    this.thread = thread;
    this.db = db;
    this.table = table;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return version;
    case 1: return name;
    case 2: return server_id;
    case 3: return ts_sec;
    case 4: return gtid;
    case 5: return file;
    case 6: return pos;
    case 7: return row;
    case 8: return snapshot;
    case 9: return thread;
    case 10: return db;
    case 11: return table;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: version = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: server_id = (java.lang.Long)value$; break;
    case 3: ts_sec = (java.lang.Long)value$; break;
    case 4: gtid = (java.lang.CharSequence)value$; break;
    case 5: file = (java.lang.CharSequence)value$; break;
    case 6: pos = (java.lang.Long)value$; break;
    case 7: row = (java.lang.Integer)value$; break;
    case 8: snapshot = (java.lang.Boolean)value$; break;
    case 9: thread = (java.lang.Long)value$; break;
    case 10: db = (java.lang.CharSequence)value$; break;
    case 11: table = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public java.lang.CharSequence getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.CharSequence value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'server_id' field.
   * @return The value of the 'server_id' field.
   */
  public java.lang.Long getServerId() {
    return server_id;
  }

  /**
   * Sets the value of the 'server_id' field.
   * @param value the value to set.
   */
  public void setServerId(java.lang.Long value) {
    this.server_id = value;
  }

  /**
   * Gets the value of the 'ts_sec' field.
   * @return The value of the 'ts_sec' field.
   */
  public java.lang.Long getTsSec() {
    return ts_sec;
  }

  /**
   * Sets the value of the 'ts_sec' field.
   * @param value the value to set.
   */
  public void setTsSec(java.lang.Long value) {
    this.ts_sec = value;
  }

  /**
   * Gets the value of the 'gtid' field.
   * @return The value of the 'gtid' field.
   */
  public java.lang.CharSequence getGtid() {
    return gtid;
  }

  /**
   * Sets the value of the 'gtid' field.
   * @param value the value to set.
   */
  public void setGtid(java.lang.CharSequence value) {
    this.gtid = value;
  }

  /**
   * Gets the value of the 'file' field.
   * @return The value of the 'file' field.
   */
  public java.lang.CharSequence getFile() {
    return file;
  }

  /**
   * Sets the value of the 'file' field.
   * @param value the value to set.
   */
  public void setFile(java.lang.CharSequence value) {
    this.file = value;
  }

  /**
   * Gets the value of the 'pos' field.
   * @return The value of the 'pos' field.
   */
  public java.lang.Long getPos() {
    return pos;
  }

  /**
   * Sets the value of the 'pos' field.
   * @param value the value to set.
   */
  public void setPos(java.lang.Long value) {
    this.pos = value;
  }

  /**
   * Gets the value of the 'row' field.
   * @return The value of the 'row' field.
   */
  public java.lang.Integer getRow() {
    return row;
  }

  /**
   * Sets the value of the 'row' field.
   * @param value the value to set.
   */
  public void setRow(java.lang.Integer value) {
    this.row = value;
  }

  /**
   * Gets the value of the 'snapshot' field.
   * @return The value of the 'snapshot' field.
   */
  public java.lang.Boolean getSnapshot() {
    return snapshot;
  }

  /**
   * Sets the value of the 'snapshot' field.
   * @param value the value to set.
   */
  public void setSnapshot(java.lang.Boolean value) {
    this.snapshot = value;
  }

  /**
   * Gets the value of the 'thread' field.
   * @return The value of the 'thread' field.
   */
  public java.lang.Long getThread() {
    return thread;
  }

  /**
   * Sets the value of the 'thread' field.
   * @param value the value to set.
   */
  public void setThread(java.lang.Long value) {
    this.thread = value;
  }

  /**
   * Gets the value of the 'db' field.
   * @return The value of the 'db' field.
   */
  public java.lang.CharSequence getDb() {
    return db;
  }

  /**
   * Sets the value of the 'db' field.
   * @param value the value to set.
   */
  public void setDb(java.lang.CharSequence value) {
    this.db = value;
  }

  /**
   * Gets the value of the 'table' field.
   * @return The value of the 'table' field.
   */
  public java.lang.CharSequence getTable() {
    return table;
  }

  /**
   * Sets the value of the 'table' field.
   * @param value the value to set.
   */
  public void setTable(java.lang.CharSequence value) {
    this.table = value;
  }

  /**
   * Creates a new Source RecordBuilder.
   * @return A new Source RecordBuilder
   */
  public static io.debezium.connector.mysql.Source.Builder newBuilder() {
    return new io.debezium.connector.mysql.Source.Builder();
  }

  /**
   * Creates a new Source RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Source RecordBuilder
   */
  public static io.debezium.connector.mysql.Source.Builder newBuilder(io.debezium.connector.mysql.Source.Builder other) {
    return new io.debezium.connector.mysql.Source.Builder(other);
  }

  /**
   * Creates a new Source RecordBuilder by copying an existing Source instance.
   * @param other The existing instance to copy.
   * @return A new Source RecordBuilder
   */
  public static io.debezium.connector.mysql.Source.Builder newBuilder(io.debezium.connector.mysql.Source other) {
    return new io.debezium.connector.mysql.Source.Builder(other);
  }

  /**
   * RecordBuilder for Source instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Source>
    implements org.apache.avro.data.RecordBuilder<Source> {

    private java.lang.CharSequence version;
    private java.lang.CharSequence name;
    private long server_id;
    private long ts_sec;
    private java.lang.CharSequence gtid;
    private java.lang.CharSequence file;
    private long pos;
    private int row;
    private java.lang.Boolean snapshot;
    private java.lang.Long thread;
    private java.lang.CharSequence db;
    private java.lang.CharSequence table;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.debezium.connector.mysql.Source.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.version)) {
        this.version = data().deepCopy(fields()[0].schema(), other.version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.server_id)) {
        this.server_id = data().deepCopy(fields()[2].schema(), other.server_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ts_sec)) {
        this.ts_sec = data().deepCopy(fields()[3].schema(), other.ts_sec);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gtid)) {
        this.gtid = data().deepCopy(fields()[4].schema(), other.gtid);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.file)) {
        this.file = data().deepCopy(fields()[5].schema(), other.file);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pos)) {
        this.pos = data().deepCopy(fields()[6].schema(), other.pos);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.row)) {
        this.row = data().deepCopy(fields()[7].schema(), other.row);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.snapshot)) {
        this.snapshot = data().deepCopy(fields()[8].schema(), other.snapshot);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.thread)) {
        this.thread = data().deepCopy(fields()[9].schema(), other.thread);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.db)) {
        this.db = data().deepCopy(fields()[10].schema(), other.db);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.table)) {
        this.table = data().deepCopy(fields()[11].schema(), other.table);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Source instance
     * @param other The existing instance to copy.
     */
    private Builder(io.debezium.connector.mysql.Source other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.version)) {
        this.version = data().deepCopy(fields()[0].schema(), other.version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.server_id)) {
        this.server_id = data().deepCopy(fields()[2].schema(), other.server_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ts_sec)) {
        this.ts_sec = data().deepCopy(fields()[3].schema(), other.ts_sec);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gtid)) {
        this.gtid = data().deepCopy(fields()[4].schema(), other.gtid);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.file)) {
        this.file = data().deepCopy(fields()[5].schema(), other.file);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pos)) {
        this.pos = data().deepCopy(fields()[6].schema(), other.pos);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.row)) {
        this.row = data().deepCopy(fields()[7].schema(), other.row);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.snapshot)) {
        this.snapshot = data().deepCopy(fields()[8].schema(), other.snapshot);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.thread)) {
        this.thread = data().deepCopy(fields()[9].schema(), other.thread);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.db)) {
        this.db = data().deepCopy(fields()[10].schema(), other.db);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.table)) {
        this.table = data().deepCopy(fields()[11].schema(), other.table);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public java.lang.CharSequence getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setVersion(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.version = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearVersion() {
      version = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'server_id' field.
      * @return The value.
      */
    public java.lang.Long getServerId() {
      return server_id;
    }

    /**
      * Sets the value of the 'server_id' field.
      * @param value The value of 'server_id'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setServerId(long value) {
      validate(fields()[2], value);
      this.server_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'server_id' field has been set.
      * @return True if the 'server_id' field has been set, false otherwise.
      */
    public boolean hasServerId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'server_id' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearServerId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts_sec' field.
      * @return The value.
      */
    public java.lang.Long getTsSec() {
      return ts_sec;
    }

    /**
      * Sets the value of the 'ts_sec' field.
      * @param value The value of 'ts_sec'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setTsSec(long value) {
      validate(fields()[3], value);
      this.ts_sec = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ts_sec' field has been set.
      * @return True if the 'ts_sec' field has been set, false otherwise.
      */
    public boolean hasTsSec() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ts_sec' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearTsSec() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'gtid' field.
      * @return The value.
      */
    public java.lang.CharSequence getGtid() {
      return gtid;
    }

    /**
      * Sets the value of the 'gtid' field.
      * @param value The value of 'gtid'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setGtid(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.gtid = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'gtid' field has been set.
      * @return True if the 'gtid' field has been set, false otherwise.
      */
    public boolean hasGtid() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'gtid' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearGtid() {
      gtid = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'file' field.
      * @return The value.
      */
    public java.lang.CharSequence getFile() {
      return file;
    }

    /**
      * Sets the value of the 'file' field.
      * @param value The value of 'file'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setFile(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.file = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'file' field has been set.
      * @return True if the 'file' field has been set, false otherwise.
      */
    public boolean hasFile() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'file' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearFile() {
      file = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'pos' field.
      * @return The value.
      */
    public java.lang.Long getPos() {
      return pos;
    }

    /**
      * Sets the value of the 'pos' field.
      * @param value The value of 'pos'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setPos(long value) {
      validate(fields()[6], value);
      this.pos = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'pos' field has been set.
      * @return True if the 'pos' field has been set, false otherwise.
      */
    public boolean hasPos() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'pos' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearPos() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'row' field.
      * @return The value.
      */
    public java.lang.Integer getRow() {
      return row;
    }

    /**
      * Sets the value of the 'row' field.
      * @param value The value of 'row'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setRow(int value) {
      validate(fields()[7], value);
      this.row = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'row' field has been set.
      * @return True if the 'row' field has been set, false otherwise.
      */
    public boolean hasRow() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'row' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearRow() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'snapshot' field.
      * @return The value.
      */
    public java.lang.Boolean getSnapshot() {
      return snapshot;
    }

    /**
      * Sets the value of the 'snapshot' field.
      * @param value The value of 'snapshot'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setSnapshot(java.lang.Boolean value) {
      validate(fields()[8], value);
      this.snapshot = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'snapshot' field has been set.
      * @return True if the 'snapshot' field has been set, false otherwise.
      */
    public boolean hasSnapshot() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'snapshot' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearSnapshot() {
      snapshot = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'thread' field.
      * @return The value.
      */
    public java.lang.Long getThread() {
      return thread;
    }

    /**
      * Sets the value of the 'thread' field.
      * @param value The value of 'thread'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setThread(java.lang.Long value) {
      validate(fields()[9], value);
      this.thread = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'thread' field has been set.
      * @return True if the 'thread' field has been set, false otherwise.
      */
    public boolean hasThread() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'thread' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearThread() {
      thread = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'db' field.
      * @return The value.
      */
    public java.lang.CharSequence getDb() {
      return db;
    }

    /**
      * Sets the value of the 'db' field.
      * @param value The value of 'db'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setDb(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.db = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'db' field has been set.
      * @return True if the 'db' field has been set, false otherwise.
      */
    public boolean hasDb() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'db' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearDb() {
      db = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'table' field.
      * @return The value.
      */
    public java.lang.CharSequence getTable() {
      return table;
    }

    /**
      * Sets the value of the 'table' field.
      * @param value The value of 'table'.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder setTable(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.table = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'table' field has been set.
      * @return True if the 'table' field has been set, false otherwise.
      */
    public boolean hasTable() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'table' field.
      * @return This builder.
      */
    public io.debezium.connector.mysql.Source.Builder clearTable() {
      table = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Source build() {
      try {
        Source record = new Source();
        record.version = fieldSetFlags()[0] ? this.version : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.server_id = fieldSetFlags()[2] ? this.server_id : (java.lang.Long) defaultValue(fields()[2]);
        record.ts_sec = fieldSetFlags()[3] ? this.ts_sec : (java.lang.Long) defaultValue(fields()[3]);
        record.gtid = fieldSetFlags()[4] ? this.gtid : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.file = fieldSetFlags()[5] ? this.file : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.pos = fieldSetFlags()[6] ? this.pos : (java.lang.Long) defaultValue(fields()[6]);
        record.row = fieldSetFlags()[7] ? this.row : (java.lang.Integer) defaultValue(fields()[7]);
        record.snapshot = fieldSetFlags()[8] ? this.snapshot : (java.lang.Boolean) defaultValue(fields()[8]);
        record.thread = fieldSetFlags()[9] ? this.thread : (java.lang.Long) defaultValue(fields()[9]);
        record.db = fieldSetFlags()[10] ? this.db : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.table = fieldSetFlags()[11] ? this.table : (java.lang.CharSequence) defaultValue(fields()[11]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Source>
    WRITER$ = (org.apache.avro.io.DatumWriter<Source>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Source>
    READER$ = (org.apache.avro.io.DatumReader<Source>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
